# 프로젝트 구조
현재 루트디렉토리 orderManagementPj 에서 django 프로젝트를 만들었으므로 아래의 구조가 만들어짐
orderManagementPj 에는 가상환경등 기타프로젝트에 필요한 내용들이 들어가 있고 실제 프로젝트는 
order_management 가 루트프로젝트라고 생각해야됨

order_management/       # 루트 프로젝트 디렉토리
    ├── manage.py       # Django 관리 파일
    └── order_management/ # Django 프로젝트 설정 파일들
        ├── __init__.py
        ├── settings.py   # 프로젝트 설정 파일
        ├── urls.py       # URL 라우팅 설정 파일
        ├── wsgi.py       # WSGI 애플리케이션 파일
        └── asgi.py       # ASGI 애플리케이션 파일


# 프로젝트 실행
settings.py INSTALLED_APPS 에 실행 프로젝트(앱) 을 명시해야됨
이후 order_management로 들어가서 실행해야됨 

Django 프로젝트와 앱 구조
먼저, Django 프로젝트와 앱의 구조를 이해하는 것이 중요합니다. 프로젝트는 여러 개의 앱으로 구성될 수 있으며, 각 앱은 특정 기능을 담당합니다. Django에서 데이터베이스와 관련된 작업은 주로 각 앱 내에서 이루어집니다.

1.1. Django 프로젝트 구조
manage.py: Django 명령어를 실행할 때 사용하는 스크립트입니다.
settings.py: 프로젝트의 설정 파일입니다.
urls.py: URL 라우팅을 관리하는 파일입니다.
app_name/: 앱 디렉터리입니다. 여기에서 모델, 뷰, 템플릿 등이 관리됩니다.
1.2. 앱 디렉터리 구조
앱 디렉터리는 보통 다음과 같은 파일을 포함합니다:

models.py: 데이터베이스 모델을 정의하는 파일입니다.
views.py: 뷰를 정의하는 파일입니다.
admin.py: Django 관리자(admin) 사이트에 모델을 등록하는 파일입니다.
migrations/: 모델 변경 사항을 관리하는 마이그레이션 파일이 저장되는 폴더입니다.

# Django에서 서버의 역할
1. HTTP 요청 처리:
runserver 명령어로 실행된 Django 개발 서버는 클라이언트(예: 웹 브라우저)로부터 들어오는 HTTP 요청을 처리합니다. 
요청이 들어오면 Django가 해당 요청을 분석하고, 적절한 뷰(view) 함수나 클래스를 호출하여 응답을 생성합니다.

2. 개발 환경 제공:
개발 서버는 로컬 환경에서 코드 변경 사항을 즉시 확인할 수 있는 개발 환경을 제공합니다. 
Django는 개발 중에 코드가 변경되면 자동으로 서버를 다시 시작하여 변경 사항을 반영합니다.

3. 정적 파일 제공
개발 서버는 정적 파일(예: CSS, JavaScript, 이미지 파일 등)을 제공하는 기능도 포함하고 있습니다. 
이는 실제 프로덕션 환경에서는 별도의 웹 서버(예: Nginx, Apache 등)가 처리하는 부분입니다.

4. 디버깅 및 테스트
Django 개발 서버는 디버깅과 테스트에 유용한 정보를 제공하는 기능이 있습니다. 
예를 들어, 코드에서 예외가 발생하면 웹 페이지에 상세한 오류 메시지를 표시하여 디버깅을 도와줍니다.